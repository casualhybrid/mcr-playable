// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(17)
            {
                { typeof(global::System.Collections.Generic.Dictionary<int, int>), 0 },
                { typeof(global::System.Collections.Generic.HashSet<float>), 1 },
                { typeof(global::System.Collections.Generic.List<global::GoalItemDataSet>), 2 },
                { typeof(global::System.Collections.Generic.List<global::IntegerValueItem>), 3 },
                { typeof(global::System.Collections.Generic.List<global::InventoryObject>), 4 },
                { typeof(global::System.Collections.Generic.List<global::LeaderBoardSerializeableData>), 5 },
                { typeof(global::System.Collections.Generic.List<string>), 6 },
                { typeof(global::DailyGoalTypes), 7 },
                { typeof(global::TheKnights.PlayServicesSystem.LeaderBoards.LeaderBoardType), 8 },
                { typeof(global::GoalItemDataSet), 9 },
                { typeof(global::IntegerValueItem), 10 },
                { typeof(global::InterstitialAdRequrements), 11 },
                { typeof(global::InventoryObject), 12 },
                { typeof(global::LeaderBoardDataSet), 13 },
                { typeof(global::LeaderBoardSerializeableData), 14 },
                { typeof(global::LeaderBoardSubmissionData), 15 },
                { typeof(global::MainSaveFile), 16 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.DictionaryFormatter<int, int>();
                case 1: return new global::MessagePack.Formatters.HashSetFormatter<float>();
                case 2: return new global::MessagePack.Formatters.ListFormatter<global::GoalItemDataSet>();
                case 3: return new global::MessagePack.Formatters.ListFormatter<global::IntegerValueItem>();
                case 4: return new global::MessagePack.Formatters.ListFormatter<global::InventoryObject>();
                case 5: return new global::MessagePack.Formatters.ListFormatter<global::LeaderBoardSerializeableData>();
                case 6: return new global::MessagePack.Formatters.ListFormatter<string>();
                case 7: return new MessagePack.Formatters.DailyGoalTypesFormatter();
                case 8: return new MessagePack.Formatters.TheKnights.PlayServicesSystem.LeaderBoards.LeaderBoardTypeFormatter();
                case 9: return new MessagePack.Formatters.GoalItemDataSetFormatter();
                case 10: return new MessagePack.Formatters.IntegerValueItemFormatter();
                case 11: return new MessagePack.Formatters.InterstitialAdRequrementsFormatter();
                case 12: return new MessagePack.Formatters.InventoryObjectFormatter();
                case 13: return new MessagePack.Formatters.LeaderBoardDataSetFormatter();
                case 14: return new MessagePack.Formatters.LeaderBoardSerializeableDataFormatter();
                case 15: return new MessagePack.Formatters.LeaderBoardSubmissionDataFormatter();
                case 16: return new MessagePack.Formatters.MainSaveFileFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class DailyGoalTypesFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::DailyGoalTypes>
    {
        public void Serialize(ref MessagePackWriter writer, global::DailyGoalTypes value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::DailyGoalTypes Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::DailyGoalTypes)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.TheKnights.PlayServicesSystem.LeaderBoards
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class LeaderBoardTypeFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::TheKnights.PlayServicesSystem.LeaderBoards.LeaderBoardType>
    {
        public void Serialize(ref MessagePackWriter writer, global::TheKnights.PlayServicesSystem.LeaderBoards.LeaderBoardType value, global::MessagePack.MessagePackSerializerOptions options)
        {
            writer.Write((Int32)value);
        }

        public global::TheKnights.PlayServicesSystem.LeaderBoards.LeaderBoardType Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            return (global::TheKnights.PlayServicesSystem.LeaderBoards.LeaderBoardType)reader.ReadInt32();
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name



// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters
{
    using global::System.Buffers;
    using global::MessagePack;

    public sealed class GoalItemDataSetFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GoalItemDataSet>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::GoalItemDataSet value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<global::DailyGoalTypes>().Serialize(ref writer, value.goalType, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.itemDescription, options);
            writer.Write(value.targetToAchive);
        }

        public global::GoalItemDataSet Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::GoalItemDataSet();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.goalType = formatterResolver.GetFormatterWithVerify<global::DailyGoalTypes>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.itemDescription = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.targetToAchive = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class IntegerValueItemFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::IntegerValueItem>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::IntegerValueItem value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.itemName, options);
            writer.Write(value.itemValue);
        }

        public global::IntegerValueItem Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::IntegerValueItem();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.itemName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.itemValue = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class InterstitialAdRequrementsFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::InterstitialAdRequrements>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::InterstitialAdRequrements value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Condition, options);
        }

        public global::InterstitialAdRequrements Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::InterstitialAdRequrements();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Condition = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class InventoryItemFormatter<T> : global::MessagePack.Formatters.IMessagePackFormatter<global::InventoryItem<T>>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::InventoryItem<T> value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.itemName, options);
            formatterResolver.GetFormatterWithVerify<T>().Serialize(ref writer, value.itemValue, options);
        }

        public global::InventoryItem<T> Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::InventoryItem<T>();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.itemName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.itemValue = formatterResolver.GetFormatterWithVerify<T>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class InventoryObjectFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::InventoryObject>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::InventoryObject value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.name, options);
            writer.WriteNil();
            writer.Write(value.isObjectUnlocked);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::IntegerValueItem>>().Serialize(ref writer, value.properties, options);
        }

        public global::InventoryObject Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::InventoryObject();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.name = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.isObjectUnlocked = reader.ReadBoolean();
                        break;
                    case 3:
                        ____result.properties = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::IntegerValueItem>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class LeaderBoardDataSetFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LeaderBoardDataSet>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::LeaderBoardDataSet value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::LeaderBoardSerializeableData>>().Serialize(ref writer, value.LeaderBoardSerializedData, options);
        }

        public global::LeaderBoardDataSet Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __LeaderBoardSerializedData__ = default(global::System.Collections.Generic.List<global::LeaderBoardSerializeableData>);

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        __LeaderBoardSerializedData__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::LeaderBoardSerializeableData>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::LeaderBoardDataSet(__LeaderBoardSerializedData__);
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class LeaderBoardSerializeableDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LeaderBoardSerializeableData>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::LeaderBoardSerializeableData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            writer.WriteNil();
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.UserName, options);
            writer.Write(value.Score);
            writer.Write(value.isLocal);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.userID, options);
        }

        public global::LeaderBoardSerializeableData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::LeaderBoardSerializeableData();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 1:
                        ____result.UserName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.Score = reader.ReadInt64();
                        break;
                    case 3:
                        ____result.isLocal = reader.ReadBoolean();
                        break;
                    case 4:
                        ____result.userID = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class LeaderBoardSubmissionDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::LeaderBoardSubmissionData>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::LeaderBoardSubmissionData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            writer.WriteNil();
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.UserName, options);
            writer.Write(value.Score);
        }

        public global::LeaderBoardSubmissionData Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::LeaderBoardSubmissionData();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 1:
                        ____result.UserName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.Score = reader.ReadInt64();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MainSaveFileFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::MainSaveFile>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::MainSaveFile value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            value.OnBeforeSerialize();
            writer.WriteArrayHeader(38);
            writer.Write(value.FileVersion);
            writer.Write(value.FileSaved);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::IntegerValueItem>>().Serialize(ref writer, value.gameIntItems, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::InventoryObject>>().Serialize(ref writer, value.gameVehicles, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::GoalItemDataSet>>().Serialize(ref writer, value.gameDailyGoals, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.sessionDate, options);
            writer.Write(value.PlayerCurrentLevel);
            writer.Write(value.PlayerCurrentXP);
            writer.Write(value.noOfWallRuns);
            writer.Write(value.noOfDashKills);
            writer.Write(value.noOfShockwaveKills);
            writer.Write(value.noOfInAir);
            writer.Write(value.noOfHits);
            writer.Write(value.noOfEnemiesDestroyed);
            writer.Write(value.noOfLaneSwitch);
            writer.Write(value.goalsCompletionStatus);
            writer.Write(value.alreadyGoalsCompleted);
            writer.Write(value.playerHighScore);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.HashSet<float>>().Serialize(ref writer, value.gamePlayBackGroundAwardsAcquired, options);
            writer.Write(value.isAdsPurchased);
            formatterResolver.GetFormatterWithVerify<global::TheKnights.PlayServicesSystem.LeaderBoards.LeaderBoardType>().Serialize(ref writer, value.currentLeaderBoardRank, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.leaderBoardUserName, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Serialize(ref writer, value.facebookRequestIdsPendingDeletion, options);
            writer.Write(value.currentlySelectedCar);
            writer.Write(value.currentlySelectedCharacter);
            writer.Write(value.currentCategoryRank);
            writer.Write(value.currentCategoryScore);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.applicationQuitTime, options);
            writer.Write(value.currentIntendedPlayerDifficultyRating);
            writer.Write(value.isSkillPlacement);
            writer.Write(value.highestSkillPlacementDifficultyRating);
            writer.WriteNil();
            writer.WriteNil();
            writer.WriteNil();
            writer.Write(value.TutorialHasCompleted);
            writer.Write(value.UniqueEnvironmentsCompleted);
            writer.Write(value.HasSignedInToFaceBookOnce);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, int>>().Serialize(ref writer, value.CharactersFigurinesAvailable, options);
        }

        public global::MainSaveFile Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::MainSaveFile();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.FileVersion = reader.ReadInt32();
                        break;
                    case 1:
                        ____result.FileSaved = reader.ReadBoolean();
                        break;
                    case 2:
                        ____result.gameIntItems = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::IntegerValueItem>>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.gameVehicles = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::InventoryObject>>().Deserialize(ref reader, options);
                        break;
                    case 4:
                        ____result.gameDailyGoals = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::GoalItemDataSet>>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        ____result.sessionDate = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 6:
                        ____result.PlayerCurrentLevel = reader.ReadInt32();
                        break;
                    case 7:
                        ____result.PlayerCurrentXP = reader.ReadSingle();
                        break;
                    case 8:
                        ____result.noOfWallRuns = reader.ReadInt32();
                        break;
                    case 9:
                        ____result.noOfDashKills = reader.ReadInt32();
                        break;
                    case 10:
                        ____result.noOfShockwaveKills = reader.ReadInt32();
                        break;
                    case 11:
                        ____result.noOfInAir = reader.ReadInt32();
                        break;
                    case 12:
                        ____result.noOfHits = reader.ReadInt32();
                        break;
                    case 13:
                        ____result.noOfEnemiesDestroyed = reader.ReadInt32();
                        break;
                    case 14:
                        ____result.noOfLaneSwitch = reader.ReadInt32();
                        break;
                    case 15:
                        ____result.goalsCompletionStatus = reader.ReadInt32();
                        break;
                    case 16:
                        ____result.alreadyGoalsCompleted = reader.ReadInt32();
                        break;
                    case 17:
                        ____result.playerHighScore = reader.ReadSingle();
                        break;
                    case 18:
                        ____result.gamePlayBackGroundAwardsAcquired = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.HashSet<float>>().Deserialize(ref reader, options);
                        break;
                    case 19:
                        ____result.isAdsPurchased = reader.ReadBoolean();
                        break;
                    case 20:
                        ____result.currentLeaderBoardRank = formatterResolver.GetFormatterWithVerify<global::TheKnights.PlayServicesSystem.LeaderBoards.LeaderBoardType>().Deserialize(ref reader, options);
                        break;
                    case 21:
                        ____result.leaderBoardUserName = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 22:
                        ____result.facebookRequestIdsPendingDeletion = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<string>>().Deserialize(ref reader, options);
                        break;
                    case 23:
                        ____result.currentlySelectedCar = reader.ReadInt32();
                        break;
                    case 24:
                        ____result.currentlySelectedCharacter = reader.ReadInt32();
                        break;
                    case 25:
                        ____result.currentCategoryRank = reader.ReadInt32();
                        break;
                    case 26:
                        ____result.currentCategoryScore = reader.ReadInt32();
                        break;
                    case 27:
                        ____result.applicationQuitTime = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 28:
                        ____result.currentIntendedPlayerDifficultyRating = reader.ReadSingle();
                        break;
                    case 29:
                        ____result.isSkillPlacement = reader.ReadBoolean();
                        break;
                    case 30:
                        ____result.highestSkillPlacementDifficultyRating = reader.ReadSingle();
                        break;
                    case 34:
                        ____result.TutorialHasCompleted = reader.ReadBoolean();
                        break;
                    case 35:
                        ____result.UniqueEnvironmentsCompleted = reader.ReadInt32();
                        break;
                    case 36:
                        ____result.HasSignedInToFaceBookOnce = reader.ReadBoolean();
                        break;
                    case 37:
                        ____result.CharactersFigurinesAvailable = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.Dictionary<int, int>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            ____result.OnAfterDeserialize();
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

