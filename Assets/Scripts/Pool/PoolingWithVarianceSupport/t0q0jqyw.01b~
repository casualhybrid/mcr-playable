using UnityEngine;
using UOP1.Pool;

public class ComponentPoolVarianceSO<T> : PoolVarianceSO<T> where T : Component
{
    protected override void OnEnable()
    {
        base.OnEnable();
    }

    private Transform _poolRoot;

    public Transform PoolRoot
    {
        get
        {
            if (_poolRoot == null)
            {
                _poolRoot = new GameObject(name).transform;
                _poolRoot.SetParent(_parent);
            }
            return _poolRoot;
        }
    }

    private Transform _parent;

    /// <summary>
    /// Parents the pool root transform to <paramref name="t"/>.
    /// </summary>
    /// <param name="t">The Transform to which this pool should become a child.</param>
    /// <remarks>NOTE: Setting the parent to an object marked DontDestroyOnLoad will effectively make this pool DontDestroyOnLoad.<br/>
    /// This can only be circumvented by manually destroying the object or its parent or by setting the parent to an object not marked DontDestroyOnLoad.</remarks>
    public void SetParent(Transform t)
    {
        _parent = t;
        PoolRoot.SetParent(_parent);
    }

    public override T Request(T key)
    {
        T member = base.Request(key);
        member.gameObject.SetActive(true);
        return member;
    }

    public override void Return(T member)
    {
        //member.transform.SetParent(PoolRoot.transform);
        //member.gameObject.SetActive(false);
        //base.Return(member);
    }

    protected override T Create(T key)
    {
        return base.Create(key);
    }

    protected override T Create()
    {
        T newMember = base.Create();
        newMember.transform.SetParent(PoolRoot.transform);
        newMember.gameObject.SetActive(false);
        return newMember;
    }

    public override void OnDisable()
    {
        base.OnDisable();
        if (_poolRoot != null)
        {
#if UNITY_EDITOR
            DestroyImmediate(_poolRoot.gameObject);
#else
				Destroy(_poolRoot.gameObject);
#endif
        }
    }
}